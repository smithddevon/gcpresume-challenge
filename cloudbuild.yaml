steps:
  # Step 1: Install Terraform (use a Docker image with Terraform pre-installed)
  - name: 'hashicorp/terraform:light'
    id: 'Terraform Init'
    entrypoint: '/bin/sh'
    args:
      - '-c'
      - |
        terraform init -v

  # Step 2: Terraform plan
  - name: 'hashicorp/terraform:light'
    id: 'Terraform Plan'
    entrypoint: '/bin/sh'
    args:
      - '-c'
      - |
        terraform plan -out=tfplan -v

  # Step 3: Apply Terraform (automated with -auto-approve flag)
  - name: 'hashicorp/terraform:light'
    id: 'Terraform Apply'
    entrypoint: '/bin/sh'
    args:
      - '-c'
      - |
        terraform apply -auto-approve tfplan -v

  # Step 4: Deploy Cloud Function for fetching resume from Firestore
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy Get Resume Cloud Function'
    args: [
      'functions', 'deploy', 'get_resume', 
      '--runtime', 'python39', 
      '--trigger-http', 
      '--allow-unauthenticated', 
      '--entry-point', 'get_resume'
    ]

  # Step 5: Deploy Cloud Function for updating Firestore when resume.json changes
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy Update Firestore Cloud Function'
    args: [
      'functions', 'deploy', 'update_resume_firestore', 
      '--runtime', 'python39', 
      '--trigger-event', 'google.storage.object.finalize', 
      '--trigger-resource', 'gcp-resume-bucket-083124',
      '--entry-point', 'upload_to_firestore',
      '-v'
    ]

timeout: '1200s'  # Increase the timeout as Terraform apply might take time

options:
  logging: CLOUD_LOGGING_ONLY
